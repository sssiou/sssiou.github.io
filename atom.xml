<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sssiou.github.io</id>
    <title>Siou </title>
    <updated>2025-01-06T03:41:02.030Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sssiou.github.io"/>
    <link rel="self" href="https://sssiou.github.io/atom.xml"/>
    <subtitle>记录</subtitle>
    <logo>https://sssiou.github.io/images/avatar.png</logo>
    <icon>https://sssiou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, Siou </rights>
    <entry>
        <title type="html"><![CDATA[UFW]]></title>
        <id>https://sssiou.github.io/post/ufw/</id>
        <link href="https://sssiou.github.io/post/ufw/">
        </link>
        <updated>2025-01-06T03:39:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="debianubuntu系统中安装和配置ufw-简单的防火墙">Debian/Ubuntu系统中安装和配置UFW－简单的防火墙</h1>
<p>自从计算机互连后，各种服务迅速发展。用户使用的<strong>电子邮件、社交媒体、在线商城、即时聊天</strong>甚至<strong>网络会议</strong>等服务如雨后春笋般涌现。但从另一方面来说，这些连接服务也具有双刃剑，比如它们当中的<strong>病毒、恶意软件、特洛伊木马</strong>等会向计算机发送恶意消息。</p>
<figure data-type="image" tabindex="1"><img src="http://www.tecmint.com/wp-content/uploads/2013/12/UFW-Firewall.jpeg" alt="Ubuntu下的 UFW 防火墙" loading="lazy"></figure>
<p><em>安装 UFW 防火墙</em></p>
<p>作为最大的计算机网络，互联网上可并不都是善意的用户。因此，为了确保我们的计算机或服务器安全，我们需要进行保护。</p>
<p>在你的计算机或服务器上一个必须有的组件就是<strong>防火墙</strong>。在<strong>维基百科</strong>中，其定义是：</p>
<blockquote>
<p>防火墙是计算机中一款应用软件或基于硬件的网络安全系统。它根据应用配置的规则，分析数据包，然后决定是否允许此数据包通过，来控制整个系统的网络数据进出访问权限。</p>
</blockquote>
<p><strong>iptables</strong> 是一款广泛使用于服务器的防火墙。它是一款应用程序，它会根据一系列规则来管理服务器上的进出数据流。一般来说，只有可信任的连接才允许进入服务器。但 <strong>iptables</strong> 是在控制台模式下运行，它非常的复杂。不熟悉 iptables 配置规则和命令的用户可以读读下面的文章，它描述了如何使用iptables防火墙。</p>
<ul>
<li><a href="http://www.tecmint.com/basic-guide-on-iptables-linux-firewall-tips-commands/">iptables 基础 (Linux 防火墙) 指南</a></li>
</ul>
<h2 id="debianubuntu-系统中安装-ufw-防火墙">Debian/Ubuntu 系统中安装 UFW 防火墙</h2>
<p>为了降低 <strong>iptables</strong> 设置的复杂度，有许多对应的前端应用。如果你运行的是 <strong>Ubuntu</strong> linux 系统的话， <strong>UFW</strong> 就是一款默认的防火墙工具。我们开始来探讨 <strong>UFW</strong> 防火墙吧。</p>
<h3 id="什么是-ufw">什么是 UFW</h3>
<p><strong>UFW (简单的防火墙)</strong> 是广泛使用的 <strong>iptables 防火墙</strong> 的前端应用，这是非常适合于基于主机的防火墙。UFW 即提供了一套管理<strong>网络过滤器</strong>的框架，又提供了控制防火墙的命令行界面接口。它给那些不熟悉防火墙概念的 Linux 新用户提供了友好、易使用的用户界面。</p>
<p>同时，另一方面，它也提供了命令行界面，为系统管理员准备了一套复杂的命令，用来设置复杂的防火墙规则。<strong>UFW</strong> 对像 <strong>Debian、Ubuntu</strong> 和 <strong>Linux Mint</strong> 这些发布版本来说也是上上之选。</p>
<h2 id="ufw-基本用法">UFW 基本用法</h2>
<p>首先，用如下命令来检查下系统上是否已经安装了 <strong>UFW</strong> 。</p>
<pre><code>$ sudo dpkg --get-selections | grep ufw
</code></pre>
<p>如还没有安装，可以使用 <strong>apt</strong> 命令来安装，如下所示：</p>
<pre><code>$ sudo apt-get install ufw
</code></pre>
<p>在使用前，你应该检查下 <strong>UFW</strong> 是否已经在运行。用下面的命令来检查。</p>
<pre><code>$ sudo ufw status
</code></pre>
<p>如果你发现状态是： <strong>inactive</strong> , 意思是没有被激活或不起作用。</p>
<h3 id="启用禁用-ufw">启用/禁用 UFW</h3>
<p>要启用它，你只需在终端下键入如下命令：</p>
<pre><code>$ sudo ufw enable
</code></pre>
<p>在系统启动时启用和激活防火墙</p>
<p>要禁用，只需输入：</p>
<pre><code>$ sudo ufw disable
</code></pre>
<h3 id="列出当前ufw规则">列出当前UFW规则</h3>
<p>在防火墙被激活后，你可以向里面添加你自己的规则。如果你想看看默认的规则，可以输入。</p>
<pre><code>$ sudo ufw status verbose
</code></pre>
<p>输出样例：</p>
<pre><code>Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing)
New profiles: skip
$
</code></pre>
<h3 id="添加ufw规则">添加UFW规则</h3>
<p>如你所见，默认是不允许所有外部访问连接的。如果你想远程连接你的机器，就得开放相应的端口。例如，你想用 ssh 来连接，下面是添加的命令。</p>
<h3 id="允许访问">允许访问</h3>
<pre><code>$ sudo ufw allow ssh

[sudo] password for pungki :
Rule added
Rule added (v6)
$
</code></pre>
<p>再一次检查状态，会看到如下的一些输出。</p>
<pre><code>$ sudo ufw status

To 		Action 			From
-- 		----------- 		------
22 		ALLOW 			Anywhere
22 		ALLOW 			Anywhere (v6)
</code></pre>
<p>如果你有很多条规则，想快速的在每条规则上加个序号数字的话，请使用 numbered 参数。</p>
<pre><code>$ sudo ufw status numbered

To 		Action 			From
------ 		----------- 		------
[1] 22 		ALLOW 			Anywhere
[2] 22 		ALLOW 			Anywhere (v6)
</code></pre>
<p>第一条规则的意思是<strong>所有</strong>通过<strong>22端口</strong>访问机器的 <strong>tcp</strong> 或 <strong>udp</strong> 数据包都是允许的。如果你希望仅允许 <strong>tcp</strong> 数据包访问应该怎么办？可以在<strong>服务端口</strong>后加个 <strong>tcp</strong> 参数。下面的示例及相应的输出。</p>
<pre><code>$ sudo ufw allow ssh/tcp

To 		Action 			From
------ 		----------- 		------
22/tcp 		ALLOW 			Anywhere
22/tcp 		ALLOW 			Anywhere (v6)
</code></pre>
<h3 id="拒绝访问">拒绝访问</h3>
<p>添加拒绝规则也是同样的招数。我们假设你想拒绝 ftp 访问, 你只需输入</p>
<pre><code>$ sudo ufw deny ftp

To 		Action 			From
------ 		----------- 		------
21/tcp 		DENY 			Anywhere
21/tcp 		DENY 			Anywhere (v6)
</code></pre>
<h3 id="添加特定端口">添加特定端口</h3>
<p>有时候，我们会自定义一个端口而不是使用标准提供的。让我们试着把机器上 <strong>ssh</strong> 的 <strong>22</strong> 端口换成 <strong>2290</strong> 端口，然后允许从 <strong>2290</strong> 端口访问，我们像这样添加：</p>
<pre><code>$ sudo ufw allow 2290/ssh (译者注：些处演示例子有问题)

To 		Action 			From
-- 		----------- 		------
2290 		ALLOW 			Anywhere
2290 		ALLOW 			Anywhere (v6)
</code></pre>
<p>你也可以把<strong>端口范围</strong>添加进规则。如果我们想打开从 <strong>2290到2300</strong> 的端口以供 <strong>tcp</strong> 协议使用，命令如下示：</p>
<pre><code>$ sudo ufw allow 2290:2300/tcp

To 			Action 			From
------ 			----------- 		------
2290:2300/tcp 		ALLOW 			Anywhere
2290:2300/tcp 		ALLOW			Anywhere (v6)
</code></pre>
<p>同样你想使用 <strong>udp</strong> 的话，如下操作。</p>
<pre><code>$ sudo ufw allow 2290:2300/udp

To 			Action 			From
------ 			----------- 		------
2290:2300/udp 		ALLOW 			Anywhere
2290:2300/udp 		ALLOW			Anywhere (v6)
</code></pre>
<p>请注意你得明确的指定是 ‘<strong>tcp</strong>’ 或 ‘<strong>udp</strong>’，否则会出现跟下面类似的错误信息。</p>
<pre><code>ERROR: Must specify ‘tcp’ or ‘udp’ with multiple ports
</code></pre>
<h3 id="添加特定-ip">添加特定 IP</h3>
<p>前面我们添加的规则都是基于 <strong>服务程序</strong> 或 <strong>端口</strong> 的，UFW 也可以添加基于 <strong>IP 地址</strong>的规则。下面是命令样例。</p>
<pre><code>$ sudo ufw allow from 192.168.0.104
</code></pre>
<p>你也可以使用子网掩码来扩宽范围。</p>
<pre><code>$ sudo ufw allow form 192.168.0.0/24

To 		Action 			From
-- 		----------- 		------
Anywhere	ALLOW 			192.168.0.104
Anywhere	ALLOW 			192.168.0.0/24
</code></pre>
<p>如你所见， from 参数仅仅限制连接的来源，而目的（用 <strong>To</strong> 列表示）是<strong>所有地方</strong>。让我们看看允许访问 **22端口(ssh)**的例子。</p>
<pre><code>$ sudo ufw allow to any port 22
</code></pre>
<p>上面的命令会允许从任何地方以及任何协议都可以访问<strong>22端口</strong>。</p>
<h3 id="组合参数">组合参数</h3>
<p>对于更具体的规则，你也可以把 <strong>IP 地址</strong>、<strong>协议</strong>和<strong>端口</strong>这些组合在一起用。我们想创建一条规则，限制仅仅来自于 192.168.0.104 的 IP ，而且只能使用 <strong>tcp 协议</strong>和通过 <strong>22端口</strong> 来访问本地资源。我们可以用如下所示的命令。</p>
<pre><code>$ sudo ufw allow from 192.168.0.104 proto tcp to any port 22
</code></pre>
<p>创建拒绝规则的命令和允许的规则类似，仅需要把 <strong>allow</strong> 参数换成 <strong>deny</strong> 参数就可以。</p>
<h3 id="删除规则">删除规则</h3>
<p>某些时候需要删除现有的规则。再一次使用 <strong>UFW</strong> 删除规则是很简单的。在上面的示例中，已经创建了如下的规则，现在你想删除它们。</p>
<pre><code>To 		Action 			From
-- 		----------- 		------
22/tcp		ALLOW 			192.168.0.104
21/tcp		ALLOW 			Anywhere
21/tcp 		ALLOW 			Anywhere (v6)
</code></pre>
<p>删除规则有两个方法。</p>
<p><strong>方法1</strong></p>
<p>下面的命令将会 <strong>删除</strong> 与 <strong>ftp</strong> 相关的规则。所以像 <strong>21/tcp</strong> 这条 <strong>ftp</strong> 默认访问端口的规则将会被删除掉。</p>
<pre><code>$ sudo ufw delete allow ftp
</code></pre>
<p><strong>方法2</strong></p>
<p>但当你使用如下命令来删除上面例子中的规则时，</p>
<pre><code>$ sudo ufw delete allow ssh

或者 

$ sudo ufw delete allow 22/tcp
</code></pre>
<p>会出现如下所示的一些错误</p>
<pre><code>Could not delete non-existent rule
Could not delete non-existent rule (v6)
</code></pre>
<p>我们还有一招。上面已经提到过，可以序列数字来代替你想删除的规则。让我们试试。</p>
<pre><code>$ sudo ufw status numbered

To 		Action 			From
-- 		----------- 		------
[1] 22/tcp		ALLOW 			192.168.0.104
[2] 21/tcp		ALLOW 			Anywhere
[3] 21/tcp 		ALLOW 			Anywhere (v6)
</code></pre>
<p>然后我们删除正在使用的第一条规则。按 “ <strong>y</strong> ” 就会永久的删除这条规则。</p>
<pre><code>$ sudo ufw delete 1

Deleting :
Allow from 192.168.0.104 to any port 22 proto tcp
Proceed with operation (y|n)? y
</code></pre>
<p>从这些用法中你就可以发现它们的不同。 <strong>方法2</strong> 在删除前需要 <strong>用户确认</strong> ，而 <strong>方法1</strong> 不需要。</p>
<h3 id="重置所有规则">重置所有规则###</h3>
<p>某些情况下，你也许需要 <strong>删除/重置</strong> 所有的规则。可以输入。</p>
<pre><code>$ sudo ufw reset

Resetting all rules to installed defaults. Proceed with operation (y|n)? y
</code></pre>
<p>如果你输入“ <strong>y</strong> ”， <strong>UFW</strong> 在重置你的 ufw 前会备份所有已经存在规则，然后重置。重置操作也会使你的防火墙处于不可用状态，如果你想使用得再一次启用它。</p>
<h3 id="高级功能">高级功能</h3>
<p>正如我上面所说，UFW防火墙能够做到iptables可以做到的一切。这是通过一些规则文件来完成的，他们只不过是 <strong>iptables-restore</strong> 所对应的文本文件而已。是否可以通过 ufw 命令微调 UFW 的与/或逻辑来增加 iptables 命令其实就是编辑几个文本文件的事。</p>
<ul>
<li>/etc/default/ufw: 默认策略的主配置文件，支持 IPv6 和 内核模块。</li>
<li>/etc/ufw/before[6].rules: 通过 ufw 命令添加进规则之前里面存在的规则会首先计算。</li>
<li>/etc/ufw/after[6].rules: 通过 ufw 命令添加进规则之后里面存在的规则会进行计算。</li>
<li>/etc/ufw/sysctl.conf: 内核网络可调参数。</li>
<li>/etc/ufw/ufw.conf: 设置系统启动时 UFW 是否可用，和设置日志级别。</li>
</ul>
<h2 id="结论">结论</h2>
<p><strong>UFW</strong> 作为 iptables 的前端应用，给用户提供了简单的接口界面。使用着不需要去记非常复杂的 iptables 语法。<strong>UFW</strong> 也使用了‘ <strong>简单英语</strong> ’作为它的参数。</p>
<p>像 <strong>Allow、deny、reset</strong> 就是他们当中的一部分。我相信有很多很多 iptables 前端应用，但 UFW 绝对是那些想要快速、简单的就建立自己的防火墙，而且还很安全的用户的最佳替代品之一。请输入 <strong>man ufw</strong> 查看 <strong>ufw 用户手册</strong>，来了解更多详情。</p>
<hr>
<p>via: http://www.tecmint.com/how-to-install-and-configure-ufw-firewall/</p>
<p>译者：<a href="https://github.com/runningwater">runningwater</a> 校对：<a href="https://github.com/carolinewuyan">Caroline</a></p>
<p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a> 原创翻译，<a href="http://linux.cn/">Linux中国</a> 荣誉推出</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://sssiou.github.io/post/hello-gridea/</id>
        <link href="https://sssiou.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>